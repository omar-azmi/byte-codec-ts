import { SArray, SPrimitive, SRecord } from "../src/schema_codec"
import { FileParser, Obj } from "../src/utility"

const png_chunk = class extends SRecord {
	constructor() {
		super()
		this.pushChildren(
			new SPrimitive("u4b").setName("chunk_length"),
			new SPrimitive("str").setName("chunk_type").setArgs(4),
			new SPrimitive("bytes").setName("chunk_data"),
			new SPrimitive("u4b").setName("chunk_crc"),
		)
	}
	override decode(buf: Uint8Array, offset: number) {
		const [chunk_a, bytesize_a] = super.decode(buf, offset, 0, 2)
		this.children[2].setArgs(chunk_a["chunk_length"])
		const [chunk_b, bytesize_b] = super.decode(buf, offset + bytesize_a, 2)
		return [{ ...chunk_a, ...chunk_b }, bytesize_a + bytesize_b] as [value: Obj, bytesize: number]
	}
}

const png_chunks = class extends SArray<Obj, "record"> {
	constructor() {
		super(new png_chunk())
	}
	override decode(buf: Uint8Array, offset: number) {
		const chunks: Obj[] = []
		let total_bytesize = 0
		while (offset + total_bytesize < buf.byteLength) {
			const [chunk, bytesize] = super.decodeNext(buf, offset + total_bytesize)
			total_bytesize += bytesize
			if (chunk["chunk_type"] === "IHDR") chunk["chunk_data"] = new data_ihdr().decode(chunk["chunk_data"], 0)[0]
			chunks.push(chunk)
			if (chunk["chunk_type"] === "IEND") break
		}
		return [chunks, total_bytesize] as [value: Obj[], bytesize: number]
	}
	override encode(chunks: Obj[]): Uint8Array {
		const modified_chunks = chunks.map((chunk) => {
			if (chunk["chunk_type"] !== "IHDR") return chunk
			return {
				...chunk,
				"chunk_data": new data_ihdr().encode(chunk["chunk_data"]),
			}
		})
		return super.encode(modified_chunks)
	}
}

const data_ihdr = class extends SRecord {
	constructor() {
		super()
		this.pushChildren(
			new SPrimitive("i4b").setName("width"),
			new SPrimitive("i4b").setName("height"),
			new SPrimitive("u1").setName("bitdepth"),
			new SPrimitive("u1").setName("colortype"),
			new SPrimitive("u1").setName("compression"),
			new SPrimitive("u1").setName("filter"),
			new SPrimitive("u1").setName("interlace"),
		)
	}
}

export const png_schema = class extends SRecord {
	constructor() {
		super()
		this.pushChildren(
			new SPrimitive("bytes")
				.setName("magic")
				.setValue(Uint8Array.of(0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a))
				.setArgs(8),
			new png_chunks().setName("chunks"),
		)
	}
}

export const png_file_parser = new FileParser(new png_schema())
window.png_file_parser = png_file_parser
export default png_file_parser



/*

let buf = Uint8Array.of(
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x01, 0x2C, 0x00, 0x00, 0x01, 0x2C, 0x04, 0x03, 0x00, 0x00, 0x00, 0x8B, 0x53, 0x93,
	0x46, 0x00, 0x00, 0x00, 0x1B, 0x50, 0x4C, 0x54, 0x45, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x1F,
	0x1F, 0x1F, 0x5F, 0x5F, 0x5F, 0x3F, 0x3F, 0x3F, 0x9F, 0x9F, 0x9F, 0xDF, 0xDF, 0xDF, 0x7F, 0x7F,
	0x7F, 0xBF, 0xBF, 0xBF, 0xD1, 0x45, 0x99, 0x5B, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73,
	0x00, 0x00, 0x0E, 0xC4, 0x00, 0x00, 0x0E, 0xC4, 0x01, 0x95, 0x2B, 0x0E, 0x1B, 0x00, 0x00, 0x02,
	0xD1, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9C, 0xED, 0xD7, 0x3F, 0x4F, 0xDB, 0x50, 0x14, 0x86, 0x71,
	0x63, 0x3B, 0x84, 0xB1, 0x6E, 0xFE, 0x90, 0xD1, 0x21, 0x90, 0x32, 0x3A, 0x0D, 0x95, 0x18, 0xED,
	0x34, 0x74, 0x8E, 0x2B, 0x54, 0x75, 0xC4, 0xA8, 0xA5, 0x2B, 0x48, 0xA8, 0x73, 0x4C, 0x25, 0xCA,
	0xC7, 0xEE, 0xB9, 0xD7, 0x0E, 0xBE, 0xB6, 0x9B, 0x4C, 0x97, 0x4C, 0xCF, 0x4F, 0x8A, 0xFD, 0x46,
	0xB6, 0x93, 0xC3, 0xB9, 0xE6, 0x24, 0x71, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFB, 0xDC, 0xF9, 0x3C, 0x2C, 0xE3, 0xE7, 0x8B, 0x76, 0x6A,
	0x9B, 0xCC, 0x3F, 0x96, 0xC9, 0x9F, 0x2F, 0x5A, 0xC9, 0x92, 0xAB, 0x20, 0x08, 0x86, 0xF7, 0xBA,
	0xBE, 0x34, 0x08, 0x46, 0x61, 0x3D, 0xB5, 0xF9, 0x72, 0x2C, 0xF8, 0xA5, 0xE3, 0x99, 0xA4, 0xA7,
	0x46, 0xB2, 0xA4, 0x33, 0x7A, 0x0C, 0xDD, 0xCB, 0x91, 0x8A, 0xC9, 0xF1, 0xC2, 0xFD, 0xDD, 0xAB,
	0xA7, 0xB6, 0xF4, 0xEF, 0xC2, 0x99, 0xE4, 0x6B, 0x55, 0x60, 0xF0, 0x18, 0x7E, 0xC8, 0xA2, 0x5A,
	0xB2, 0xA5, 0x1B, 0xAB, 0xED, 0xC3, 0x4A, 0x5A, 0x34, 0x0C, 0x65, 0x93, 0xC7, 0x66, 0xFA, 0x8F,
	0x47, 0x7D, 0xD5, 0x40, 0x36, 0xE3, 0x5B, 0xD9, 0x9C, 0xF7, 0x6B, 0xC9, 0xAE, 0xA3, 0x77, 0xF2,
	0x78, 0xAF, 0xD2, 0xF4, 0xC6, 0x4C, 0x5B, 0xE5, 0xEA, 0x11, 0xCA, 0xC6, 0xBD, 0xAB, 0x25, 0xBB,
	0xBA, 0x52, 0x48, 0xB2, 0xD2, 0xA9, 0x67, 0xA6, 0xAD, 0x1E, 0x42, 0xC7, 0x1F, 0x14, 0x29, 0x32,
	0x92, 0x65, 0x9E, 0x94, 0x95, 0x86, 0x3A, 0x8E, 0xCC, 0xB4, 0xD5, 0x2C, 0x74, 0x3A, 0xBA, 0xA7,
	0xCE, 0xC1, 0xDA, 0x48, 0x96, 0x75, 0x64, 0x11, 0xCB, 0x35, 0xC8, 0xCD, 0xA4, 0x74, 0x8B, 0x22,
	0xBD, 0xD8, 0xBC, 0x20, 0x75, 0x9C, 0xC3, 0x1B, 0x9D, 0x64, 0xFD, 0xAB, 0x64, 0xD9, 0x58, 0x96,
	0xAD, 0x58, 0x09, 0xB5, 0x3C, 0x55, 0xD2, 0xC7, 0x6E, 0xF5, 0x6E, 0xB6, 0x36, 0xCE, 0x77, 0xE5,
	0x94, 0x03, 0xBD, 0xD4, 0x6A, 0xFD, 0xAB, 0x64, 0x97, 0x7B, 0x27, 0xB7, 0xCA, 0x71, 0x91, 0x67,
	0x51, 0x95, 0xF4, 0xCE, 0x57, 0xFF, 0x97, 0x8E, 0x57, 0x5B, 0xD2, 0xA9, 0x94, 0x9A, 0xE8, 0x61,
	0xE7, 0x78, 0x3D, 0x23, 0x59, 0xE5, 0xA7, 0x4F, 0xD5, 0x8B, 0x26, 0x51, 0x95, 0xCA, 0xBD, 0x6A,
	0x57, 0xAD, 0x59, 0x57, 0x6A, 0xD6, 0x6E, 0xAA, 0xEE, 0x19, 0xC9, 0xA2, 0xEF, 0xCF, 0xC1, 0xB5,
	0xEC, 0xBC, 0x72, 0xEC, 0x8C, 0xEF, 0xAB, 0x54, 0x56, 0x2D, 0xED, 0x32, 0x9A, 0xD5, 0x79, 0xC9,
	0x06, 0xB1, 0x2A, 0x34, 0xD6, 0x4F, 0xDD, 0x63, 0x23, 0xD9, 0x2C, 0xEB, 0x25, 0xFB, 0x19, 0xEF,
	0x2A, 0x4B, 0xB5, 0xCB, 0x68, 0x56, 0xE7, 0xE5, 0x79, 0x78, 0xFD, 0xF6, 0x65, 0xC9, 0xEB, 0x5D,
	0x0E, 0x76, 0x96, 0xE5, 0x0F, 0x27, 0xF5, 0x61, 0x31, 0xC9, 0x57, 0x7B, 0x28, 0x4B, 0xDE, 0x62,
	0xB5, 0xAB, 0x2C, 0x27, 0xC9, 0xD6, 0xF5, 0xF3, 0xBD, 0xC1, 0x5E, 0xCA, 0xEA, 0xF6, 0x5F, 0x6F,
	0xD8, 0x24, 0xF2, 0x1B, 0xB7, 0xBC, 0x1C, 0x0E, 0xC2, 0xC6, 0x05, 0x0F, 0xF1, 0xE6, 0xB0, 0x9C,
	0x9D, 0xBC, 0xC5, 0x2D, 0xAF, 0xC8, 0x1C, 0x7A, 0x1D, 0x0B, 0x71, 0x95, 0x36, 0x87, 0x67, 0xF9,
	0x6D, 0xE3, 0x02, 0x19, 0x74, 0x9B, 0xB1, 0xD0, 0x37, 0x92, 0x6D, 0xA3, 0xED, 0xE3, 0x54, 0xCD,
	0xAC, 0x62, 0x76, 0x19, 0xE4, 0x83, 0xE6, 0xED, 0xC7, 0xA9, 0x2E, 0x6B, 0xDB, 0x87, 0x8F, 0x9E,
	0x59, 0x49, 0xA3, 0x5D, 0x52, 0xD6, 0x1E, 0x3E, 0x7C, 0x54, 0x83, 0x8A, 0xE6, 0xB8, 0xB5, 0xA4,
	0xA9, 0x99, 0xD5, 0x6C, 0x97, 0x34, 0xA8, 0x6C, 0xCE, 0xD8, 0x4C, 0x96, 0x79, 0xBD, 0x1D, 0x5F,
	0x6C, 0xF4, 0xCC, 0x6A, 0xB4, 0x6B, 0x16, 0xED, 0xE3, 0x8B, 0xCD, 0xA1, 0xFC, 0xBD, 0x47, 0xFA,
	0x8E, 0x1D, 0xAF, 0xCD, 0xA4, 0x4B, 0xD6, 0x33, 0xAB, 0xD1, 0xAE, 0x4C, 0x9E, 0xE9, 0xAF, 0xAF,
	0xAE, 0x3A, 0x5A, 0x25, 0x5B, 0xCE, 0xD4, 0xBB, 0xB9, 0x79, 0xA4, 0x3E, 0xAF, 0xE5, 0xC5, 0xDD,
	0x2C, 0x36, 0x93, 0x51, 0x5E, 0x52, 0xEC, 0xDC, 0xAF, 0x6A, 0x7B, 0xAE, 0x3A, 0x39, 0xFD, 0xA1,
	0x36, 0xFD, 0x5A, 0xB2, 0x65, 0x3A, 0xBA, 0x38, 0x99, 0xA4, 0x7A, 0x24, 0x7C, 0x19, 0x2C, 0x4E,
	0xD3, 0x7E, 0x3D, 0x09, 0xAF, 0xD8, 0xF9, 0x61, 0x51, 0x56, 0xF6, 0x67, 0x71, 0xF2, 0x29, 0x50,
	0x23, 0xC1, 0xCF, 0xAE, 0x4F, 0xAE, 0x82, 0xB8, 0x96, 0xAC, 0xB9, 0x94, 0xDF, 0x52, 0x03, 0xFD,
	0x96, 0xEE, 0xB7, 0x76, 0x6A, 0xF3, 0x72, 0xB9, 0x40, 0xB7, 0xCC, 0x39, 0xCB, 0xDA, 0xC9, 0x1A,
	0x7F, 0xF9, 0xFA, 0xCB, 0xF3, 0x74, 0xD9, 0x4E, 0x6D, 0xCB, 0x65, 0x58, 0x26, 0x77, 0x19, 0xB7,
	0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7D,
	0xFF, 0x00, 0x9C, 0x2F, 0x76, 0x8B, 0xD5, 0x13, 0x2E, 0x17, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
	0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
)
let decoded_png = new png_schema().decode(buf, 0)
console.log(decoded_png[0])
let new_buf = new png_schema().encode(decoded_png[0])
for(let i = 0; i < buf.length; i++) if(buf[i] != new_buf[i]) console.log(i)
*/